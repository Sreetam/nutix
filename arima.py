# -*- coding: utf-8 -*-
"""nutix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AddjxanwbkQkqvDm7I8Ndeq4qM8TA7Vg
"""

import matplotlib.pyplot as plt
import pandas as pd
import pmdarima as pm
from sklearn.metrics import mean_squared_error

df = pd.read_csv("commodities.csv")
df['date'] = pd.to_datetime(df[df.columns[0]])
df.drop(columns=df.columns[0], inplace=True)
df.set_index('date', inplace=True)
# sc = MinMaxScaler(feature_range = (0, 1))
# df = pd.DataFrame(sc.fit_transform(df.values), index=df.index, columns=df.columns)

timeseries = df["peanut"][0:8000]
def arimamodel(timeseries):
    automodel = pm.auto_arima(timeseries, 
                              start_p=1, 
                              start_q=1,
                              test="adf",
                              seasonal=False,
                              trace=True)
    return automodel
def plotarima(n_periods, timeseries, automodel):
    # Forecast
    fc, confint = automodel.predict(n_periods=n_periods, return_conf_int=True)
    # Weekly index
    fc_ind = pd.date_range(timeseries.index[timeseries.shape[0]-1], periods=n_periods, freq="D")
    # Forecast series
    fc_series = pd.Series(fc, index=fc_ind)
    # Upper and lower confidence bounds
    lower_series = pd.Series(confint[:, 0], index=fc_ind)
    upper_series = pd.Series(confint[:, 1], index=fc_ind)
    # Create plot
    plt.figure(figsize=(10, 6))
    plt.plot(timeseries)
    plt.plot(fc_series, color="red")
    plt.xlabel("date")
    plt.ylabel("peanut price")
    plt.fill_between(lower_series.index, 
                     lower_series, 
                     upper_series, 
                     color="k", alpha=.25)
    plt.plot(df.peanut[timeseries.shape[0]:timeseries.shape[0] + n_periods])
    plt.legend(("past", "forecast", "actual", "95% confidence interval"), loc="upper left")
    plt.savefig("arima.png")
    print(mean_squared_error(df.peanut[timeseries.shape[0]:timeseries.shape[0] + n_periods].values, fc))

automodel = arimamodel(timeseries)
automodel.summary()

plotarima(2929, timeseries, automodel)